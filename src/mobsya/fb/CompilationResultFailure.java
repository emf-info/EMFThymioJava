// automatically generated by the FlatBuffers compiler, do not modify

package mobsya.fb;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CompilationResultFailure extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static CompilationResultFailure getRootAsCompilationResultFailure(ByteBuffer _bb) { return getRootAsCompilationResultFailure(_bb, new CompilationResultFailure()); }
  public static CompilationResultFailure getRootAsCompilationResultFailure(ByteBuffer _bb, CompilationResultFailure obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CompilationResultFailure __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long requestId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String message() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer messageAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer messageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public long character() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long line() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long column() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createCompilationResultFailure(FlatBufferBuilder builder,
      long requestId,
      int messageOffset,
      long character,
      long line,
      long column) {
    builder.startTable(5);
    CompilationResultFailure.addColumn(builder, column);
    CompilationResultFailure.addLine(builder, line);
    CompilationResultFailure.addCharacter(builder, character);
    CompilationResultFailure.addMessage(builder, messageOffset);
    CompilationResultFailure.addRequestId(builder, requestId);
    return CompilationResultFailure.endCompilationResultFailure(builder);
  }

  public static void startCompilationResultFailure(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addRequestId(FlatBufferBuilder builder, long requestId) { builder.addInt(0, (int) requestId, (int) 0L); }
  public static void addMessage(FlatBufferBuilder builder, int messageOffset) { builder.addOffset(1, messageOffset, 0); }
  public static void addCharacter(FlatBufferBuilder builder, long character) { builder.addInt(2, (int) character, (int) 0L); }
  public static void addLine(FlatBufferBuilder builder, long line) { builder.addInt(3, (int) line, (int) 0L); }
  public static void addColumn(FlatBufferBuilder builder, long column) { builder.addInt(4, (int) column, (int) 0L); }
  public static int endCompilationResultFailure(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // message
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CompilationResultFailure get(int j) { return get(new CompilationResultFailure(), j); }
    public CompilationResultFailure get(CompilationResultFailure obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

