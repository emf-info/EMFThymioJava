// automatically generated by the FlatBuffers compiler, do not modify

package mobsya.fb;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class EventsEmitted extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static EventsEmitted getRootAsEventsEmitted(ByteBuffer _bb) { return getRootAsEventsEmitted(_bb, new EventsEmitted()); }
  public static EventsEmitted getRootAsEventsEmitted(ByteBuffer _bb, EventsEmitted obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EventsEmitted __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public mobsya.fb.NodeId nodeId() { return nodeId(new mobsya.fb.NodeId()); }
  public mobsya.fb.NodeId nodeId(mobsya.fb.NodeId obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public mobsya.fb.NamedValue events(int j) { return events(new mobsya.fb.NamedValue(), j); }
  public mobsya.fb.NamedValue events(mobsya.fb.NamedValue obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int eventsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public mobsya.fb.NamedValue eventsByKey(String key) { int o = __offset(6); return o != 0 ? mobsya.fb.NamedValue.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public mobsya.fb.NamedValue eventsByKey(mobsya.fb.NamedValue obj, String key) { int o = __offset(6); return o != 0 ? mobsya.fb.NamedValue.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public mobsya.fb.NamedValue.Vector eventsVector() { return eventsVector(new mobsya.fb.NamedValue.Vector()); }
  public mobsya.fb.NamedValue.Vector eventsVector(mobsya.fb.NamedValue.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * unix timestamp ( miliseconds) of when the events were emitted - or 0 if unspecified
   */
  public long timestamp() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createEventsEmitted(FlatBufferBuilder builder,
      int nodeIdOffset,
      int eventsOffset,
      long timestamp) {
    builder.startTable(3);
    EventsEmitted.addTimestamp(builder, timestamp);
    EventsEmitted.addEvents(builder, eventsOffset);
    EventsEmitted.addNodeId(builder, nodeIdOffset);
    return EventsEmitted.endEventsEmitted(builder);
  }

  public static void startEventsEmitted(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addNodeId(FlatBufferBuilder builder, int nodeIdOffset) { builder.addOffset(0, nodeIdOffset, 0); }
  public static void addEvents(FlatBufferBuilder builder, int eventsOffset) { builder.addOffset(1, eventsOffset, 0); }
  public static int createEventsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEventsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(2, timestamp, 0L); }
  public static int endEventsEmitted(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EventsEmitted get(int j) { return get(new EventsEmitted(), j); }
    public EventsEmitted get(EventsEmitted obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

