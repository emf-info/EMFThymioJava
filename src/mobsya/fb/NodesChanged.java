// automatically generated by the FlatBuffers compiler, do not modify

package mobsya.fb;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Message sent by the server when a node changes status.
 * This messages is automatically sent when the application first connects and each time one or more node change status
 */
@SuppressWarnings("unused")
public final class NodesChanged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static NodesChanged getRootAsNodesChanged(ByteBuffer _bb) { return getRootAsNodesChanged(_bb, new NodesChanged()); }
  public static NodesChanged getRootAsNodesChanged(ByteBuffer _bb, NodesChanged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public NodesChanged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Nodes whose status changed. it's up to the client to maintain a list of all nodes.
   */
  public mobsya.fb.Node nodes(int j) { return nodes(new mobsya.fb.Node(), j); }
  public mobsya.fb.Node nodes(mobsya.fb.Node obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int nodesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public mobsya.fb.Node.Vector nodesVector() { return nodesVector(new mobsya.fb.Node.Vector()); }
  public mobsya.fb.Node.Vector nodesVector(mobsya.fb.Node.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createNodesChanged(FlatBufferBuilder builder,
      int nodesOffset) {
    builder.startTable(1);
    NodesChanged.addNodes(builder, nodesOffset);
    return NodesChanged.endNodesChanged(builder);
  }

  public static void startNodesChanged(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addNodes(FlatBufferBuilder builder, int nodesOffset) { builder.addOffset(0, nodesOffset, 0); }
  public static int createNodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endNodesChanged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public NodesChanged get(int j) { return get(new NodesChanged(), j); }
    public NodesChanged get(NodesChanged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

