// automatically generated by the FlatBuffers compiler, do not modify

package mobsya.fb;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class VMExecutionStateChanged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static VMExecutionStateChanged getRootAsVMExecutionStateChanged(ByteBuffer _bb) { return getRootAsVMExecutionStateChanged(_bb, new VMExecutionStateChanged()); }
  public static VMExecutionStateChanged getRootAsVMExecutionStateChanged(ByteBuffer _bb, VMExecutionStateChanged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VMExecutionStateChanged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public mobsya.fb.NodeId nodeId() { return nodeId(new mobsya.fb.NodeId()); }
  public mobsya.fb.NodeId nodeId(mobsya.fb.NodeId obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public short state() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public long line() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public short error() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String errorMsg() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorMsgAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer errorMsgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createVMExecutionStateChanged(FlatBufferBuilder builder,
      int nodeIdOffset,
      short state,
      long line,
      short error,
      int errorMsgOffset) {
    builder.startTable(5);
    VMExecutionStateChanged.addErrorMsg(builder, errorMsgOffset);
    VMExecutionStateChanged.addLine(builder, line);
    VMExecutionStateChanged.addNodeId(builder, nodeIdOffset);
    VMExecutionStateChanged.addError(builder, error);
    VMExecutionStateChanged.addState(builder, state);
    return VMExecutionStateChanged.endVMExecutionStateChanged(builder);
  }

  public static void startVMExecutionStateChanged(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addNodeId(FlatBufferBuilder builder, int nodeIdOffset) { builder.addOffset(0, nodeIdOffset, 0); }
  public static void addState(FlatBufferBuilder builder, short state) { builder.addShort(1, state, 0); }
  public static void addLine(FlatBufferBuilder builder, long line) { builder.addInt(2, (int) line, (int) 0L); }
  public static void addError(FlatBufferBuilder builder, short error) { builder.addShort(3, error, 0); }
  public static void addErrorMsg(FlatBufferBuilder builder, int errorMsgOffset) { builder.addOffset(4, errorMsgOffset, 0); }
  public static int endVMExecutionStateChanged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VMExecutionStateChanged get(int j) { return get(new VMExecutionStateChanged(), j); }
    public VMExecutionStateChanged get(VMExecutionStateChanged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

